<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1422149487621">{:repl-history {:ide [], :local [&quot;\&quot;hello world\&quot;&quot; &quot;(+ 1 2)&quot; &quot;(def (atom cpu (chip8.cpu/build-cpu)))&quot; &quot;(def cpu (atom (chip8.cpu/build-cpu)))&quot; &quot;(:memory @cpu)&quot; &quot;(swap! cpu chip8.cpu/load-game \&quot;/Users/jfitzgerald/Projects/side_projects/emulators/c8games/PONG\&quot;)&quot; &quot;(:delay-timer @cpu)&quot; &quot;(:delay-timer (assoc-in @cpu [:delay-timer] 1))&quot; &quot;(def cpu (atom (\n                 chip8.cpu/build-cpu)))&quot; &quot;(load-game @cpu \&quot;/Users/jfitzgerald/Projects/side_projects/emulators/c8games/PONG\&quot;)&quot; &quot;(cpu/load-game @cpu \&quot;/Users/jfitzgerald/Projects/side_projects/emulators/c8games/PONG\&quot;)&quot; &quot;(key delay-timer)&quot; &quot;(def cpu (atom cpu/build-cpu))&quot; &quot;(swap! cpu cpu/load-game \&quot;/Users/jfitzgerald/Projects/side_projects/emulators/c8games/PONG\&quot;)&quot; &quot;(def cpu (atom (build-cpu)))&quot; &quot;(require '[chip8.cpu :as chip8])&quot; &quot;(def cpu (atom (chip8/build-cpu)))&quot; &quot;(require '[chip8.opcode-operations :as op-ops])&quot; &quot;(def number-vec [1 2 3 4])&quot; &quot;number-vec&quot; &quot;(list number-vec\n      )&quot; &quot;(into '() number-vec)&quot; &quot;(reverse (into '() number-vec))&quot; &quot;(keyword delay-timer)&quot; &quot;(keyword \&quot;delay-timer\&quot;)&quot; &quot;(require '[chip8.util\n           :as cpu])&quot; &quot;(require '[chip8.cpu :as cpu])&quot; &quot;(def cpu (cpu/build-cpu))&quot; &quot;cpu&quot; &quot;(:delay-timer cpu)&quot; &quot;(require '[chip8.cpu :refer :all])&quot; &quot;(set-timer cpu \&quot;delay-timer\&quot; 5)&quot; &quot;(:delay-timer (set-timer cpu \&quot;delay-timer\&quot; 5))&quot; &quot;(:delay-timer (dec-timer \&quot;delay-timer\&quot; (set-timer cpu \&quot;delay-timer\&quot; 5)))&quot; &quot;(:delay-timer (dec-timer (set-timer cpu \&quot;delay-timer\&quot; 5) \&quot;delay-timer\&quot;))&quot; &quot;(require '[chip8.cpu :refer :all\n           ])&quot; &quot;(def cpu (build-cpu))&quot; &quot;(:delay-timer (dec-timers (set-timer cpu \&quot;delay-timer\&quot; 5)))&quot; &quot;(:sound-timer (dec-timers (set-timer cpu \&quot;delay-timer\&quot; 5)))&quot; &quot;(def cpu-atom (atom (build-cpu\n                      )))&quot; &quot;(swap! (set-timer \&quot;delay-timer\&quot; 5))&quot; &quot;(swap! (set-timer \&quot;delay-timer\&quot; 5) cpu-atom)&quot; &quot;(swap! cpu-atom (set-timer \&quot;delay-timer\&quot; 5))&quot; &quot;(swap! cpu-atom (dec-timer \&quot;delay-timer\&quot; ))&quot; &quot;(swap! cpu-atom set-timer \&quot;delay-timer\&quot; 5)&quot; &quot;(swap! cpu-atom set-timer \&quot;sound-timer\&quot; 5)&quot; &quot;(swap! cpu-atom dec-timers)&quot; &quot;(:delay-timer @cpu-atom)&quot; &quot;(:sound-timer @cpu-atom)&quot; &quot;(= 0 0 0)&quot; &quot;(= 0 0 1)&quot; &quot;(= 0 1 1)&quot; &quot;(bit-or (bit-shift-left 123 8) 543)&quot; &quot;(bit-shift-left 123 8)&quot; &quot;(bit-shift-left 2r00000001 8)&quot; &quot;(bit-shift-left 2r00000010 8)&quot; &quot;(bit-shift-left 2r0010 8)&quot; &quot;(bit-shift-left 2r0011 8)&quot;], :remote []}}</component>
</project>